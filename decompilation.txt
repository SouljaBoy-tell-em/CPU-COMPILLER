/*

void decompilation (int * commandsArray, Label * labels, FILE * fileDecompilation, unsigned long sizeCommandsArray, Register * registers) {

    int flagCommands = 0;
    int i = 0;
    for (i = 2; i < sizeCommandsArray; i++) 
        decompilationCommand (commandsArray [i], fileDecompilation, &flagCommands, registers);
}


void decompilationCommand (int command, FILE * fileDecompilation, int * flagCommands, Register * registers) {

    //--------------SIMPLE COMMANDS--------------//

    if ( * flagCommands == 0) {

        if (command == CMD_ADD)
            fprintf (fileDecompilation, "add\n" );

        if (command == CMD_SUB)
            fprintf (fileDecompilation, "sub\n" );

        if (command == CMD_MUL)
            fprintf (fileDecompilation, "mul\n" );

        if (command == CMD_DIV)
            fprintf (fileDecompilation, "div\n" );

        if (command == CMD_DUMP)
            fprintf (fileDecompilation, "dump\n");

        if (command == CMD_ENDL)
            fprintf (fileDecompilation, "endl\n");

        if (command == CMD_SPACE)
            fprintf (fileDecompilation, "space\n");

        if (command == CMD_OUT)
            fprintf (fileDecompilation, "out\n" );

        if (command == CMD_HLT)
            fprintf (fileDecompilation, "hlt\n" );
    }

    //-------------------------------------------//

    if ( * flagCommands == MASKIMMED) {

        fprintf (fileDecompilation, "%d\n", command);
        * flagCommands = 0;
        return;
    }

    if ( * flagCommands == MASKREGISTER) {

        fprintf (fileDecompilation, "%s\n", (registers + command)->name);
        * flagCommands = 0;
        return;
    }

    if ( * flagCommands == 4) {

        fprintf (fileDecompilation, "[%d]\n", command);
        * flagCommands = 0;
        return;
    }

    if ( * flagCommands == 5) {

        fprintf (fileDecompilation, "[%s]\n", (registers + command)->name);
        * flagCommands = 0;
        return;
    }

    if ( * flagCommands == 2) {

        fprintf (fileDecompilation, "(%d)\n", command);
        * flagCommands = 0;
        return;
    }

    if ( * flagCommands == 3) {

        fprintf (fileDecompilation, "%d\n", command);
        * flagCommands = 0;
        return;
    }

    if ((command & TURNOFFMASKIMMED) == CMD_PUSH) {

        fprintf (fileDecompilation, "push ");
        * flagCommands = MASKIMMED;
        return;
    }

    if ((command & TURNOFFMASKREGISTER) == CMD_PUSH) {

        fprintf (fileDecompilation, "push ");
        * flagCommands = MASKREGISTER;
        return;
    }

    if ((command & TURNOFFMASKRAM) == (MASKIMMED | CMD_PUSH) || (command & TURNOFFMASKRAM) == (MASKREGISTER | CMD_PUSH)) {

        command = command & TURNOFFMASKRAM;

        if ((command & TURNOFFMASKIMMED) == CMD_PUSH)
            * flagCommands = 4;

        if ((command & TURNOFFMASKREGISTER) == CMD_PUSH)
            * flagCommands = 5;

        fprintf (fileDecompilation, "push ");
        return;
    }

    if ((command & TURNOFFMASKPOP) == CMD_POP) {

        fprintf (fileDecompilation, "pop\n");
        return;
    }

    if ((command & TURNOFFMASKIMMED) == CMD_POP) {

        fprintf (fileDecompilation, "pop ");
        * flagCommands = MASKIMMED;
        return;
    }

    if ((command & TURNOFFMASKREGISTER) == CMD_POP) {

        fprintf (fileDecompilation, "pop ");
        * flagCommands = MASKREGISTER;
        return;
    }

    if ((command & TURNOFFMASKRAM) == (MASKIMMED | CMD_POP) || (command & TURNOFFMASKRAM) == (MASKREGISTER | CMD_POP)) {

        command = command & TURNOFFMASKRAM;

        if ((command & TURNOFFMASKIMMED) == CMD_POP)
            * flagCommands = 4;

        if ((command & TURNOFFMASKREGISTER) == CMD_POP)
            * flagCommands = 5;

        fprintf (fileDecompilation, "pop ");
        return;
    }


    if (command == CMD_IN) {

        fprintf (fileDecompilation, "in ");
        * flagCommands = 2;
    }

    if (command == CMD_JMP) {

        fprintf (fileDecompilation, "jmp ");
        * flagCommands = 3;
    }

    if (command == CMD_JB) {

        fprintf (fileDecompilation, "jb ");
        * flagCommands = 3;
    }

    if (command == CMD_JBE) {

        fprintf (fileDecompilation, "jbe ");
        * flagCommands = 3;
    }

    if (command == CMD_JA) {

        fprintf (fileDecompilation, "ja ");
        * flagCommands = 3;
    }

    if (command == CMD_JAE) {

        fprintf (fileDecompilation, "jae ");
        * flagCommands = 3;
    }

    if (command == CMD_JE) {

        fprintf (fileDecompilation, "je ");
        * flagCommands = 3;
    }

    if (command == CMD_JNE) {

        fprintf (fileDecompilation, "jne ");
        * flagCommands = 3;
    }
}

*/
